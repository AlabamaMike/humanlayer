// Code generated by MockGen. DO NOT EDIT.
// Source: bus/types.go
//
// Generated by this command:
//
//	mockgen -source=bus/types.go -destination=bus/mock_bus.go -package=bus EventBus
//

// Package bus is a generated GoMock package.
package bus

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventBus is a mock of EventBus interface.
type MockEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusMockRecorder
	isgomock struct{}
}

// MockEventBusMockRecorder is the mock recorder for MockEventBus.
type MockEventBusMockRecorder struct {
	mock *MockEventBus
}

// NewMockEventBus creates a new mock instance.
func NewMockEventBus(ctrl *gomock.Controller) *MockEventBus {
	mock := &MockEventBus{ctrl: ctrl}
	mock.recorder = &MockEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBus) EXPECT() *MockEventBusMockRecorder {
	return m.recorder
}

// GetSubscriberCount mocks base method.
func (m *MockEventBus) GetSubscriberCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriberCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSubscriberCount indicates an expected call of GetSubscriberCount.
func (mr *MockEventBusMockRecorder) GetSubscriberCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriberCount", reflect.TypeOf((*MockEventBus)(nil).GetSubscriberCount))
}

// Publish mocks base method.
func (m *MockEventBus) Publish(event Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", event)
}

// Publish indicates an expected call of Publish.
func (mr *MockEventBusMockRecorder) Publish(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventBus)(nil).Publish), event)
}

// Subscribe mocks base method.
func (m *MockEventBus) Subscribe(ctx context.Context, filter EventFilter) *Subscriber {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, filter)
	ret0, _ := ret[0].(*Subscriber)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockEventBusMockRecorder) Subscribe(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEventBus)(nil).Subscribe), ctx, filter)
}

// Unsubscribe mocks base method.
func (m *MockEventBus) Unsubscribe(subscriberID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", subscriberID)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockEventBusMockRecorder) Unsubscribe(subscriberID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockEventBus)(nil).Unsubscribe), subscriberID)
}
